name: Terraform Cloud (Apply on main)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_CLOUD_ORGANIZATION: "wikisaas-org"
      TF_WORKSPACE: "wikisaas-platform"
      CONFIG_DIRECTORY: "./terraform"

    steps:
      # 1. R√©cup√©rer le code du repo
      - name: Checkout
        uses: actions/checkout@v3

      # 2. R√©cup√©rer l'ID interne du workspace
      - name: Get Workspace ID
        id: get-ws
        run: |
          echo "‚û°Ô∏è R√©cup√©ration de l‚ÄôID du workspace..."
          workspace_resp=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            https://app.terraform.io/api/v2/organizations/${TF_CLOUD_ORGANIZATION}/workspaces/${TF_WORKSPACE})

          ws_id=$(echo $workspace_resp | jq -r '.data.id')
          echo "Workspace ID: $ws_id"
          echo "ws_id=$ws_id" >> $GITHUB_OUTPUT

      # 3. Cr√©er une configuration-version et uploader le code
      - name: Upload Config
        id: upload
        run: |
          ws_id=${{ steps.get-ws.outputs.ws_id }}

          echo "‚û°Ô∏è Cr√©ation d‚Äôune configuration-version..."
          resp=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data "{\"data\":{\"type\":\"configuration-versions\",\"attributes\":{\"auto-queue-runs\":true}}}" \
            https://app.terraform.io/api/v2/workspaces/$ws_id/configuration-versions)

          upload_url=$(echo $resp | jq -r '.data.attributes."upload-url"')
          echo "Upload URL: $upload_url"

          echo "‚û°Ô∏è Compression et upload de la config..."
          cd $CONFIG_DIRECTORY
          tar -czf ../config.tar.gz .
          cd -
          curl --request PUT --header "Content-Type: application/octet-stream" --data-binary @config.tar.gz "$upload_url"

      # 4. Cr√©er un run Terraform
      - name: Create Run
        id: create-run
        run: |
          ws_id=${{ steps.get-ws.outputs.ws_id }}

          echo "‚û°Ô∏è Cr√©ation d‚Äôun run Terraform"
          payload=$(cat <<EOF
          {
            "data": {
              "attributes": {
                "is-destroy": false,
                "message": "Run d√©clench√© par GitHub Actions"
              },
              "type": "runs",
              "relationships": {
                "workspace": {
                  "data": {
                    "type": "workspaces",
                    "id": "$ws_id"
                  }
                }
              }
            }
          }
          EOF
          )

          response=$(curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            --request POST \
            --data "$payload" \
            https://app.terraform.io/api/v2/runs)

          echo "$response"
          run_id=$(echo "$response" | jq -r '.data.id')
          echo "run_id=$run_id" >> $GITHUB_OUTPUT

      # 4b. Attendre la fin du run
      - name: Wait for Run to Complete
        run: |
          run_id=${{ steps.create-run.outputs.run_id }}
          echo "‚è≥ Attente de la fin du run $run_id ..."
          
          for i in {1..30}; do
            status=$(curl -s \
              --header "Authorization: Bearer $TF_API_TOKEN" \
              https://app.terraform.io/api/v2/runs/$run_id \
              | jq -r '.data.attributes.status')

            echo "‚û°Ô∏è Statut actuel : $status"

            if [ "$status" = "applied" ] || [ "$status" = "planned_and_finished" ]; then
              echo "‚úÖ Run termin√© avec succ√®s"
              exit 0
            elif [ "$status" = "errored" ] || [ "$status" = "canceled" ]; then
              echo "‚ùå Run √©chou√© ou annul√©"
              exit 1
            fi

            sleep 10
          done

          echo "‚ùå Timeout : le run n'a pas fini apr√®s 5 minutes"
          exit 1

      # 5. R√©cup√©rer et afficher les outputs Terraform Cloud
      - name: Get Terraform Outputs
        run: |
          echo "üì¶ R√©cup√©ration des outputs Terraform..."
          curl -s \
            --header "Authorization: Bearer $TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/organizations/${TF_CLOUD_ORGANIZATION}/workspaces/${TF_WORKSPACE}/current-state-version-outputs \
            | jq -r '.data[] | "\(.attributes.name) = \(.attributes.value)"'
