name: Terraform CLI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    timeout-minutes: 35
    if: |
      contains(github.event.head_commit.message, 'terraform') ||
      github.event_name == 'workflow_dispatch'

    env:
      TF_CLOUD_ORGANIZATION: "wikisaas-org"     # ton organisation Terraform Cloud
      TF_WORKSPACE: "wikisaas-platform"         # ton workspace Terraform Cloud
      CONFIG_DIRECTORY: "./terraform"           # dossier contenant tes .tf

    outputs:
      ec2_public_ip:         ${{ steps.export_outputs.outputs.EC2_PUBLIC_IP }}
      ec2_public_dns:        ${{ steps.export_outputs.outputs.EC2_PUBLIC_DNS }}
      dns_records:           ${{ steps.export_outputs.outputs.DNS_RECORDS }}
      r2_bucket_name:        ${{ steps.export_outputs.outputs.R2_BUCKET_NAME }}
      r2_account_id:         ${{ steps.export_outputs.outputs.R2_ACCOUNT_ID }}
      r2_location:           ${{ steps.export_outputs.outputs.R2_LOCATION }}
      r2_bucket_endpoint:    ${{ steps.export_outputs.outputs.R2_BUCKET_ENDPOINT }}
      vpc_id:                ${{ steps.export_outputs.outputs.VPC_ID }}
      public_subnet_id:      ${{ steps.export_outputs.outputs.PUBLIC_SUBNET_ID }}
      rds_subnet_group:      ${{ steps.export_outputs.outputs.RDS_SUBNET_GROUP }}
      ec2_security_group_id: ${{ steps.export_outputs.outputs.EC2_SECURITY_GROUP_ID }}
      rds_security_group_id: ${{ steps.export_outputs.outputs.RDS_SECURITY_GROUP_ID }}
      db_host_ia:            ${{ steps.export_outputs.outputs.DB_HOST_IA }}
      db_host_devops:        ${{ steps.export_outputs.outputs.DB_HOST_DEVOPS }}
      db_host_cyber:         ${{ steps.export_outputs.outputs.DB_HOST_CYBER }}

    steps:
      - uses: actions/checkout@v4

      # Installer Terraform CLI
      - name: Setup Terraform CLI
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # Initialiser Terraform
      - name: Terraform Init
        run: terraform -chdir=${{ env.CONFIG_DIRECTORY }} init -input=false

      # Plan (optionnel pour debug)
      - name: Terraform Plan
        run: terraform -chdir=${{ env.CONFIG_DIRECTORY }} plan -input=false

      # Apply (exécute directement sur le runner GitHub)
      - name: Terraform Apply
        run: terraform -chdir=${{ env.CONFIG_DIRECTORY }} apply -auto-approve -input=false

      # Exporter les outputs Terraform
      - name: Export outputs Terraform
        id: export_outputs
        run: |
          set -euo pipefail
          O=$(terraform -chdir=${{ env.CONFIG_DIRECTORY }} output -json)

          echo "EC2_PUBLIC_IP=$(echo "$O" | jq -r .ec2_public_ip.value)" >> $GITHUB_OUTPUT
          echo "EC2_PUBLIC_DNS=$(echo "$O" | jq -r .ec2_public_dns.value)" >> $GITHUB_OUTPUT
          echo "DNS_RECORDS=$(echo "$O" | jq -c .dns_records.value)" >> $GITHUB_OUTPUT
          echo "R2_BUCKET_NAME=$(echo "$O" | jq -r .r2_bucket_name.value)" >> $GITHUB_OUTPUT
          echo "R2_ACCOUNT_ID=$(echo "$O" | jq -r .r2_account_id.value)" >> $GITHUB_OUTPUT
          echo "R2_LOCATION=$(echo "$O" | jq -r .r2_location.value)" >> $GITHUB_OUTPUT
          echo "R2_BUCKET_ENDPOINT=$(echo "$O" | jq -r .r2_bucket_endpoint.value)" >> $GITHUB_OUTPUT
          echo "VPC_ID=$(echo "$O" | jq -r .vpc_id.value)" >> $GITHUB_OUTPUT
          echo "PUBLIC_SUBNET_ID=$(echo "$O" | jq -r .public_subnet_id.value)" >> $GITHUB_OUTPUT
          echo "RDS_SUBNET_GROUP=$(echo "$O" | jq -r .rds_subnet_group.value)" >> $GITHUB_OUTPUT
          echo "EC2_SECURITY_GROUP_ID=$(echo "$O" | jq -r .ec2_security_group_id.value)" >> $GITHUB_OUTPUT
          echo "RDS_SECURITY_GROUP_ID=$(echo "$O" | jq -r .rds_security_group_id.value)" >> $GITHUB_OUTPUT
          echo "DB_HOST_IA=$(echo "$O" | jq -r .db_host_ia.value)" >> $GITHUB_OUTPUT
          echo "DB_HOST_DEVOPS=$(echo "$O" | jq -r .db_host_devops.value)" >> $GITHUB_OUTPUT
          echo "DB_HOST_CYBER=$(echo "$O" | jq -r .db_host_cyber.value)" >> $GITHUB_OUTPUT


  ansible:
    runs-on: ubuntu-latest
    needs: [terraform]   # attend Terraform seulement si Terraform est déclenché
  
    env: 
       # Secrets GitHub
      ADMIN_PASS_CYBER: ${{ secrets.ADMIN_PASS_CYBER }}
      ADMIN_PASS_DEVOPS: ${{ secrets.ADMIN_PASS_DEVOPS }}
      ADMIN_PASS_IA: ${{ secrets.ADMIN_PASS_IA }}
      BDD_PASSWORD: ${{ secrets.BDD_PASSWORD }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      CLOUDFLARE_API_TOKEN_R2: ${{ secrets.CLOUDFLARE_API_TOKEN_R2 }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      KEYCLOAK_ADMIN_PASS: ${{ secrets.KEYCLOAK_ADMIN_PASS }}
      R2_ACCESS_KEY: ${{ secrets.R2_ACCESS_KEY }}
      R2_SECRET_KEY: ${{ secrets.R2_SECRET_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      KEYCLOAK_DB_PASSWORD: ${{ secrets.KEYCLOAK_DB_PASSWORD }}
      VM_SSH_KEY: ${{ secrets.VM_SSH_KEY }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "$VM_SSH_KEY" | sed 's/\\n/\n/g' > ~/.ssh/newtest.pem
          chmod 600 ~/.ssh/newtest.pem

      - name: Install Ansible
        run: sudo apt-get update && sudo apt-get install -y ansible

      - name: Install Ansible collections
        run: ansible-galaxy collection install ansible.posix

      - name: Add SSH known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H wikiplatform.app >> ~/.ssh/known_hosts

      - name: Run Ansible Playbook
        run: |
          ansible-playbook \
              -i ansible/inventories/prod/hosts.ini \
              ansible/site.yml \
              -e ec2_public_ip='${{ needs.terraform.outputs.ec2_public_ip }}' \
              -e ec2_public_dns='${{ needs.terraform.outputs.ec2_public_dns }}' \
              -e r2_bucket_name='${{ needs.terraform.outputs.r2_bucket_name }}' \
              -e r2_account_id='${{ needs.terraform.outputs.r2_account_id }}' \
              -e r2_location='${{ needs.terraform.outputs.r2_location }}' \
              -e r2_bucket_endpoint='${{ needs.terraform.outputs.r2_bucket_endpoint }}' \
              -e vpc_id='${{ needs.terraform.outputs.vpc_id }}' \
              -e public_subnet_id='${{ needs.terraform.outputs.public_subnet_id }}' \
              -e rds_subnet_group='${{ needs.terraform.outputs.rds_subnet_group }}' \
              -e ec2_security_group_id='${{ needs.terraform.outputs.ec2_security_group_id }}' \
              -e rds_security_group_id='${{ needs.terraform.outputs.rds_security_group_id }}' \
              -e dns_records='${{ needs.terraform.outputs.dns_records }}' \
              -e db_host_ia='${{ needs.terraform.outputs.db_host_ia  }}' \
              -e db_host_devops='${{ needs.terraform.outputs.db_host_devops }}' \
              -e db_host_cyber='${{ needs.terraform.outputs.db_host_cyber }}'
