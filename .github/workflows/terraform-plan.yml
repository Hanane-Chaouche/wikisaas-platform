name: Terraform Plan

on:
  pull_request:

env:
  TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
  TF_CLOUD_ORGANIZATION: "wikisaas-org"
  TF_WORKSPACE: "wikisaas-platform"
  CONFIG_DIRECTORY: "./terraform"

jobs:
  terraform:
    if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
      # 1. Récupérer le code
      - name: Checkout
        uses: actions/checkout@v3

      # 2. Uploader la config Terraform vers Terraform Cloud (spéculatif pour un plan PR)
      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      # 3. Créer un run Terraform (plan uniquement)
      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      # 4. Récupérer le résultat du plan
      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      # 5. Poster le résultat du plan dans le Pull Request
      - name: Update PR with Plan Result
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Récupérer les anciens commentaires du bot
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('HCP Terraform Plan Output')
            });

            // 2. Créer le contenu du nouveau commentaire
            const output = `
#### HCP Terraform Plan Output
\`\`\`
Plan: ${{
  steps.plan-output.outputs.add
}} to add, ${{
  steps.plan-output.outputs.change
}} to change, ${{
  steps.plan-output.outputs.destroy
}} to destroy.
\`\`\`

[Voir le plan Terraform](${{ steps.plan-run.outputs.run_link }})
`;

            // 3. Supprimer l’ancien commentaire si présent
            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }

            // 4. Poster le nouveau commentaire
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
