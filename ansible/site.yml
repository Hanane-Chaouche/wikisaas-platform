---
- name: Deploiement complet plateforme Wikijs SaaS
  hosts: wikijs_servers
  become: true

  vars_files:
    - group_vars/all.yml

  pre_tasks:
    - name: Inspecter - Afficher les scalaires principaux
      tags: [inspect]
      ansible.builtin.debug:
        msg:
          - "ec2_public_ip         = {{ ec2_public_ip }}"
          - "ec2_public_dns        = {{ ec2_public_dns }}"
          - "vpc_id                = {{ vpc_id }}"
          - "public_subnet_id      = {{ public_subnet_id }}"
          - "rds_subnet_group      = {{ rds_subnet_group }}"
          - "ec2_security_group_id = {{ ec2_security_group_id }}"
          - "rds_security_group_id = {{ rds_security_group_id }}"
          - "r2_bucket_name        = {{ r2_bucket_name }}"
          - "r2_account_id         = {{ r2_account_id }}"
          - "r2_location           = {{ r2_location }}"
          - "r2_bucket_endpoint    = {{ r2_bucket_endpoint }}"

    - name: Inspecter - Type des objets recus
      tags: [inspect]
      ansible.builtin.debug:
        msg:
          - "type(db_endpoints) = {{ db_endpoints | type_debug }}"
          - "type(dns_records)  = {{ dns_records  | type_debug }}"

    # Normaliser pour garantir des dicts
    - name: Normaliser db_endpoints et dns_records
      ansible.builtin.set_fact:
        db_eps: >-
          {{ db_endpoints if db_endpoints is mapping
             else (db_endpoints | default('{}') | from_json) }}
        dns_recs: >-
          {{ dns_records if dns_records is mapping
             else (dns_records  | default('{}') | from_json) }}

    - name: Inspecter - db_endpoints formate
      tags: [inspect]
      ansible.builtin.debug:
        msg: "{{ db_eps | to_nice_json }}"

    - name: Inspecter - dns_records formate
      tags: [inspect]
      ansible.builtin.debug:
        msg: "{{ dns_recs | to_nice_json }}"

    - name: Deriver first_dns_name apres normalisation
      ansible.builtin.set_fact:
        first_dns_name: "{{ (dns_recs.keys() | list | first | default('')) }}"

    - name: Inspecter - Acces (db host 'cyber' et premier DNS)
      tags: [inspect]
      ansible.builtin.debug:
        msg:
          - "db host (cyber) = {{ db_eps.cyber | default('non defini') }}"
          - "first_dns_name = {{ first_dns_name }}"
          - "first_dns value = {{ dns_recs[first_dns_name] | default('') }}"

    # Construire wikis_final en injectant pg_host depuis db_eps.<name>
    - name: Initialiser wikis_final
      ansible.builtin.set_fact:
        wikis_final: []

    - name: Construire wikis_final avec pg_host depuis db_eps
      ansible.builtin.set_fact:
        wikis_final: "{{ wikis_final + [ wiki | combine({'pg_host': (db_eps[wiki.name] | default(wiki.pg_host | default('')))}) ] }}"
      loop: "{{ wikis }}"
      loop_control:
        loop_var: wiki

    - name: Inspecter - Apercu wikis_final
      tags: [inspect]
      ansible.builtin.debug:
        var: wikis_final

  roles:
    - role: common
    - role: docker
    - role: traefik
    - role: keycloak
    - role: postgres
    - role: wiki
      vars:
        # Liste enrichie (pg_host injecte depuis Terraform)
        wikis: "{{ wikis_final | default(wikis) }}"
        # Objets normalises disponibles dans la role
        db_endpoints: "{{ db_eps }}"
        dns_records: "{{ dns_recs }}"
        first_dns_name: "{{ first_dns_name }}"
