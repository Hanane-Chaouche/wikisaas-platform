#!/usr/bin/env bash
set -euo pipefail

#############################################
# Chargement des variables d'environnement
#############################################
ENV_FILE="/opt/keycloak/.env"
[ -f "$ENV_FILE" ] || { echo "ERR: $ENV_FILE introuvable"; exit 1; }
set -a; source "$ENV_FILE"; set +a
echo "=== Variables récupérées du fichier .env ==="

#############################################
# Constantes / chemins
#############################################
COMPOSE="/opt/keycloak/docker-compose.yml"
SERVICE="keycloak"
KCADM="/opt/keycloak/bin/kcadm.sh"

# IMPORTANT : tjs exporter KCADM_CONFIG dans toutes les commandes conteneur
KCADM_ENV='export KCADM_CONFIG=/tmp/kcadm.config'
dc() { docker compose -f "$COMPOSE" exec -T "$SERVICE" sh -lc "$KCADM_ENV; $*"; }

#############################################
# Attente de disponibilité de Keycloak (+ login admin)
#############################################
echo " [init] Attente que Keycloak soit prêt..."
for i in {1..60}; do
  if dc "$KCADM config credentials \
           --server http://localhost:8080 \
           --realm master \
           --user '${KEYCLOAK_ADMIN}' \
           --password '${KEYCLOAK_ADMIN_PASSWORD}'"; then
    echo "[init]  Login admin OK"
    break
  fi
  sleep 2
  [[ $i -eq 60 ]] && { echo " ERR: Keycloak pas prêt après 2 min"; exit 1; }
done

REALM="${KEYCLOAK_REALM}"
BASE_DOMAIN="${DOMAIN}"
echo "REALM: ${REALM}"
echo "BASE_DOMAIN: ${BASE_DOMAIN}"

#############################################
#  Création du Realm
#############################################
echo -e "\n=== Création du Realm ==="
if dc "$KCADM get realms/${REALM}" >/dev/null 2>&1; then
  echo " Realm '${REALM}' existe déjà."
else
  echo " Création du realm '${REALM}'..."
  dc "$KCADM create realms -s realm='${REALM}' -s enabled=true"
fi

#############################################
#  Création des Rôles
#############################################
echo -e "\n=== Création des Rôles ==="
for role in ia-admin devops-admin cyber-admin; do
  if dc "$KCADM get roles -r ${REALM}" | grep -q "\"name\" : \"${role}\""; then
    echo " Rôle '${role}' existe déjà."
  else
    echo " Création du rôle '${role}'..."
    dc "$KCADM create roles -r ${REALM} -s name=${role}"
  fi
done

#############################################
#  Création des Groupes
#############################################
echo -e "\n=== Création des Groupes ==="
for group in STARTER PRO ENTERPRISE; do
  if dc "$KCADM get groups -r ${REALM} -q search=${group} --fields name" | grep -q "\"name\" : \"${group}\""; then
    echo " Groupe '${group}' existe déjà."
  else
    echo " Création du groupe '${group}'..."
    dc "$KCADM create groups -r ${REALM} -s name=${group}"
  fi
done

#############################################
#  Association Rôles → Groupes
#############################################
echo -e "\n=== Association Rôles → Groupes ==="
get_group_id() {
  local name="$1"
  dc "$KCADM get groups -r ${REALM} -q search=${name} --fields id,name" \
  | grep '"id"' | head -n1 | cut -d '"' -f4
}
STARTER_ID="$(get_group_id STARTER || true)"
PRO_ID="$(get_group_id PRO || true)"
ENTERPRISE_ID="$(get_group_id ENTERPRISE || true)"

for mapping in \
  "$STARTER_ID:ia-admin" \
  "$PRO_ID:ia-admin" "$PRO_ID:devops-admin" \
  "$ENTERPRISE_ID:ia-admin" "$ENTERPRISE_ID:devops-admin" "$ENTERPRISE_ID:cyber-admin"; do
  gid="${mapping%%:*}"
  role="${mapping##*:}"
  if [ -n "${gid:-}" ]; then
    echo " Association rôle '${role}' → groupe '${gid}'"
    dc "$KCADM add-roles -r ${REALM} --gid ${gid} --rolename ${role}" || true
  fi
done

#############################################
# Clients + Mappers OIDC
#############################################
echo -e "\n===  Gestion des Clients & Mappers ==="
get_client_uuid() {
  local cid="$1"
  dc "$KCADM get clients -r ${REALM} -q clientId=${cid} --fields id" \
  | grep '"id"' | head -n1 | cut -d '"' -f4
}

create_client () {
  local cid="$1"
  local redirect="https://${cid}.${BASE_DOMAIN}/login/oidc/callback"
  local origin="https://${cid}.${BASE_DOMAIN}"

  # Client
  if dc "$KCADM get clients -r ${REALM} -q clientId=${cid} --fields clientId" \
     | grep -q "\"clientId\" : \"${cid}\""; then
    echo " Client '${cid}' existe déjà."
  else
    echo " Création du client '${cid}'..."
    dc "$KCADM create clients -r ${REALM} -f - <<JSON
{ \"clientId\":\"${cid}\", \"protocol\":\"openid-connect\", \"publicClient\":false,
  \"standardFlowEnabled\":true, \"redirectUris\":[\"${redirect}\"],
  \"webOrigins\":[\"${origin}\"] }
JSON"
  fi

  # UUID client
  local uuid; uuid="$(get_client_uuid "${cid}")"
  [ -n "${uuid:-}" ] || { echo " ERR: UUID client ${cid} introuvable"; exit 1; }

  # Helper: ajouter un mapper si absent
  add_mapper () {
    local name="$1" mapper="$2" extra="$3"
    if dc "$KCADM get clients/${uuid}/protocol-mappers/models -r ${REALM} --fields name" | grep -q "\"name\" : \"${name}\""; then
      echo " Mapper '${name}' déjà présent pour ${cid}."
    else
      echo " Ajout du mapper '${name}' pour ${cid}..."
      dc "$KCADM create clients/${uuid}/protocol-mappers/models -r ${REALM} -f - <<JSON
{ \"name\":\"${name}\", \"protocol\":\"openid-connect\", \"protocolMapper\":\"${mapper}\", \"config\": ${extra} }
JSON"
    fi
  }

  # Mappers standards
  add_mapper "email"              "oidc-usermodel-property-mapper" \
    "{ \"claim.name\":\"email\", \"user.attribute\":\"email\", \"id.token.claim\":\"true\", \"access.token.claim\":\"true\", \"userinfo.token.claim\":\"true\" }"
  add_mapper "preferred_username" "oidc-usermodel-property-mapper" \
    "{ \"claim.name\":\"preferred_username\", \"user.attribute\":\"username\", \"id.token.claim\":\"true\", \"access.token.claim\":\"true\", \"userinfo.token.claim\":\"true\" }"
  add_mapper "given_name"         "oidc-usermodel-property-mapper" \
    "{ \"claim.name\":\"given_name\", \"user.attribute\":\"firstName\", \"id.token.claim\":\"true\", \"access.token.claim\":\"true\", \"userinfo.token.claim\":\"true\" }"
  add_mapper "family_name"        "oidc-usermodel-property-mapper" \
    "{ \"claim.name\":\"family_name\", \"user.attribute\":\"lastName\", \"id.token.claim\":\"true\", \"access.token.claim\":\"true\", \"userinfo.token.claim\":\"true\" }"
  add_mapper "groups"             "oidc-group-membership-mapper" \
    "{ \"full.path\":\"false\", \"claim.name\":\"groups\", \"jsonType.label\":\"String\", \"multivalued\":\"true\", \"id.token.claim\":\"true\", \"access.token.claim\":\"true\", \"userinfo.token.claim\":\"true\" }"
}

# Créer/mettre à jour les 3 clients attendus
create_client "ia"
create_client "devops"
create_client "cyber"

# Vérifier que les 3 clients existent avant export
echo "[check] Vérification de la présence des clients..."
for cid in ia devops cyber; do
  ok=false
  for i in {1..10}; do
    if dc "$KCADM get clients -r ${REALM} -q clientId=${cid} --fields id" | grep -q '"id"'; then
      echo "  → $cid trouvé"
      ok=true; break
    else
      echo "  → $cid pas encore prêt, attente..."
      sleep 5
    fi
  done
  $ok || { echo "ERR: $cid introuvable après 50s"; exit 1; }
done

#############################################
# Export des secrets des clients OIDC (écriture atomique)
#############################################
echo -e "\n=== Export des secrets des clients OIDC ==="
mkdir -p /opt/keycloak
OUTPUT="/opt/keycloak/clients.json"
TMP="$(mktemp /opt/keycloak/clients.json.XXXXXX)"

echo "{" > "$TMP"
first=true

for cid in ia devops cyber; do
  uuid=$(dc "$KCADM get clients -r ${REALM} -q clientId=$cid --fields id" | grep '"id"' | head -n1 | cut -d '"' -f4)
  [ -n "${uuid:-}" ] || { echo "ERR: UUID manquant pour $cid"; exit 1; }

  secret=$(dc "$KCADM get clients/$uuid/client-secret -r ${REALM}" | grep '"value"' | cut -d '"' -f4)
  [ -n "${secret:-}" ] || { echo "ERR: secret manquant pour $cid"; exit 1; }

  $first || echo "," >> "$TMP"; first=false
  echo "  \"$cid\": \"$secret\"" >> "$TMP"
  echo "  → $cid : $secret"
done

echo "}" >> "$TMP"
mv -f "$TMP" "$OUTPUT"
echo "[export] Fichier généré : $OUTPUT"
echo "[export] Contenu :"
cat "$OUTPUT"

# NE marquer réussi qu'après avoir effectivement généré le JSON
if [ -s "$OUTPUT" ]; then
  echo "Init Keycloak terminé avec succès le $(date)" > /opt/keycloak/.init_done
else
  echo "ERR: $OUTPUT non généré — init inachevé"; exit 1
fi
echo "=== Fin du script d'init Keycloak ==="