#!/usr/bin/env bash
set -euo pipefail

# --- Charge les variables depuis /opt/keycloak/.env ---
ENV_FILE="/opt/keycloak/.env"
[ -f "$ENV_FILE" ] || { echo "ERR: $ENV_FILE introuvable"; exit 1; }
set -a; source "$ENV_FILE"; set +a
# Variables attendues : KEYCLOAK_ADMIN, KEYCLOAK_ADMIN_PASSWORD, KEYCLOAK_REALM, DOMAIN

# --- Constantes/chemins ---
COMPOSE="/opt/keycloak/docker-compose.yml"   # sur l'hôte
SERVICE="keycloak"                           # nom du service dans docker-compose.yml
KCADM="/opt/keycloak/bin/kcadm.sh"           # dans le conteneur

# Exécuter DANS le conteneur
dc() { docker compose -f "$COMPOSE" exec -T "$SERVICE" bash -lc "$*"; }

# --- Attente de disponibilité via login kcadm (pas de curl nécessaire) ---
echo "[init] Attente + login admin (sans curl)..."
for i in {1..60}; do
  if dc "export KCADM_CONFIG=/tmp/kcadm.config && \
         $KCADM config credentials --server http://localhost:8080 \
         --realm master --user '${KEYCLOAK_ADMIN}' --password '${KEYCLOAK_ADMIN_PASSWORD}'"; then
    echo "[init] Login OK"
    break
  fi
  sleep 2
  [[ $i -eq 60 ]] && { echo "ERR: Keycloak pas prêt (login kcadm échoué)"; exit 1; }
done

REALM="${KEYCLOAK_REALM}"
BASE_DOMAIN="${DOMAIN}"

# --- Realm (idempotent & robuste) ---
if dc $KCADM get realms/${REALM} > /dev/null 2>&1; then
  echo "[init] Realm ${REALM} existe déjà."
else
  echo "[init] Création realm ${REALM}..."
  dc $KCADM create realms -s realm="${REALM}" -s enabled=true
fi

# --- Rôles (idempotent) ---
for role in ia-admin devops-admin cyber-admin; do
  if dc "$KCADM get roles -r '${REALM}'" | grep -q "\"name\" : \"${role}\""; then
    echo "[init] Rôle ${role} existe déjà"
  else
    dc "$KCADM create roles -r '${REALM}' -s name='${role}'"
  fi
done

# --- Groupes (idempotent) ---
for group in STARTER PRO ENTERPRISE; do
  if dc "$KCADM get groups -r '${REALM}' -q search='${group}' --fields name" | grep -q "\"name\" : \"${group}\""; then
    echo "[init] Groupe ${group} existe déjà"
  else
    dc "$KCADM create groups -r '${REALM}' -s name='${group}'"
  fi
done

# --- Helpers robustes (sans jq) ---
get_group_id() {
  # Utilise la recherche filtrée puis extrait l'id correspondant au nom exact
  local name="$1"
  dc "$KCADM get 'groups?search=${name}' -r '${REALM}' --fields id,name" \
  | awk -v pat="\"name\" : \""$name"\"" -F\" '
      $0 ~ pat {f=1} f && /"id"/ {print $4; exit}
    '
}

get_client_uuid() {
  local cid="$1"
  # Filtre directement par clientId (évite le gros listing)
  dc "$KCADM get clients -r '${REALM}' -q clientId='${cid}' --fields id" \
  | awk -F\" '/"id"/{print $4; exit}'
}

# --- IDs de groupe (robuste) ---
STARTER_ID="$(get_group_id STARTER || true)"
PRO_ID="$(get_group_id PRO || true)"
ENTERPRISE_ID="$(get_group_id ENTERPRISE || true)"

# Vérifie que les IDs existent, sinon arrête tout de suite (évite //role-mappings/realm)
[ -n "${STARTER_ID:-}" ] || { echo "ERR: ID groupe STARTER introuvable"; exit 1; }
[ -n "${PRO_ID:-}" ] || { echo "ERR: ID groupe PRO introuvable"; exit 1; }
[ -n "${ENTERPRISE_ID:-}" ] || { echo "ERR: ID groupe ENTERPRISE introuvable"; exit 1; }

# --- Associer rôles → groupes (best-effort idempotent) ---
dc "$KCADM add-roles -r '${REALM}' --gid '${STARTER_ID}'    --rolename ia-admin"       || true
dc "$KCADM add-roles -r '${REALM}' --gid '${PRO_ID}'        --rolename ia-admin"       || true
dc "$KCADM add-roles -r '${REALM}' --gid '${PRO_ID}'        --rolename devops-admin"   || true
dc "$KCADM add-roles -r '${REALM}' --gid '${ENTERPRISE_ID}' --rolename ia-admin"       || true
dc "$KCADM add-roles -r '${REALM}' --gid '${ENTERPRISE_ID}' --rolename devops-admin"   || true
dc "$KCADM add-roles -r '${REALM}' --gid '${ENTERPRISE_ID}' --rolename cyber-admin"    || true

# --- Création client + mappers ---
create_client () {
  local cid="$1"
  local redirect="https://${cid}.${BASE_DOMAIN}/login/oidc/callback"
  local origin="https://${cid}.${BASE_DOMAIN}"

  # Créer le client si absent (sans "secret": Keycloak en générera un automatiquement)
  if dc "$KCADM get clients -r '${REALM}' -q clientId='${cid}' --fields clientId" | grep -q "\"clientId\" : \"${cid}\""; then
    echo "[init] Client ${cid} existe déjà"
  else
    dc "$KCADM create clients -r '${REALM}' -f - <<JSON
{ \"clientId\":\"${cid}\", \"protocol\":\"openid-connect\", \"publicClient\":false,
  \"standardFlowEnabled\":true, \"redirectUris\":[\"${redirect}\"],
  \"webOrigins\":[\"${origin}\"] }
JSON"
  fi

  # Récupérer l'UUID du client
  local uuid
  uuid="$(get_client_uuid "${cid}")"
  [ -n "${uuid:-}" ] || { echo "ERR: UUID client ${cid} introuvable"; exit 1; }

  # Ajoute un mapper "user property" si absent
  add_prop () { local name="$1" claim="$2" attr="$3";
    dc "$KCADM get clients/${uuid}/protocol-mappers/models -r '${REALM}' --fields name" | grep -q "\"name\" : \"${name}\"" \
      || dc "$KCADM create clients/${uuid}/protocol-mappers/models -r '${REALM}' -f - <<JSON
{ \"name\":\"${name}\", \"protocol\":\"openid-connect\", \"protocolMapper\":\"oidc-usermodel-property-mapper\",
  \"config\": { \"claim.name\":\"${claim}\", \"user.attribute\":\"${attr}\",
               \"id.token.claim\":\"true\",\"access.token.claim\":\"true\",\"userinfo.token.claim\":\"true\" } }
JSON"
  }

  add_prop email              email              email
  add_prop preferred_username preferred_username username
  add_prop given_name         given_name         firstName
  add_prop family_name        family_name        lastName

  # Mapper "groups"
  dc "$KCADM get clients/${uuid}/protocol-mappers/models -r '${REALM}' --fields name" | grep -q '"name" : "groups"' \
    || dc "$KCADM create clients/${uuid}/protocol-mappers/models -r '${REALM}' -f - <<JSON
{ \"name\":\"groups\",\"protocol\":\"openid-connect\",\"protocolMapper\":\"oidc-group-membership-mapper\",
  \"config\": { \"full.path\":\"false\",\"claim.name\":\"groups\",
               \"id.token.claim\":\"true\",\"access.token.claim\":\"true\",\"userinfo.token.claim\":\"true\" } }
JSON"

  # Mapper "roles"
  dc "$KCADM get clients/${uuid}/protocol-mappers/models -r '${REALM}' --fields name" | grep -q '"name" : "roles"' \
    || dc "$KCADM create clients/${uuid}/protocol-mappers/models -r '${REALM}' -f - <<JSON
{ \"name\":\"roles\",\"protocol\":\"openid-connect\",\"protocolMapper\":\"oidc-usermodel-realm-role-mapper\",
  \"config\": { \"multivalued\":\"true\",\"claim.name\":\"roles\",\"jsonType.label\":\"String\",
               \"id.token.claim\":\"true\",\"access.token.claim\":\"true\",\"userinfo.token.claim\":\"true\" } }
JSON"
}

# --- Créer les clients attendus ---
create_client "wiki-ia"
create_client "wiki-devops"
create_client "wiki-cyber"

# --- (Optionnel) Récupérer les secrets générés automatiquement ---
# Exemple:
# for cid in wiki-ia wiki-devops wiki-cyber; do
#   uuid="$(get_client_uuid "$cid")"
#   secret="$(dc "$KCADM get clients/${uuid}/client-secret -r '${REALM}'" | awk -F\" '/"value"/{print $4; exit}')"
#   echo "$cid : $secret"
# done

# --- Marqueur d'idempotence ---
touch /opt/keycloak/.init_done
echo "[init] Terminé."
