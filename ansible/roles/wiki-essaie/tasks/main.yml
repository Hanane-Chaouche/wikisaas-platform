---
- name: Créer le dossier Wiki.js
  become: true
  file:
    path: /opt/wiki
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Créer le dossier des fichiers .env pour Wiki.js
  become: true
  file:
    path: /opt/wiki/envs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Supprimer les anciens fichiers .env
  file:
    path: "/opt/wiki/envs/wiki-{{ item.name }}.env"
    state: absent
  loop: "{{ wikis }}"

- name: Créer le dossier des certificats RDS
  become: true
  file:
    path: /opt/wiki/certs
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Télécharger le certificat SSL RDS global
  become: true
  get_url:
    url: https://truststore.pki.rds.amazonaws.com/global/global-bundle.pem
    dest: /opt/wiki/certs/rds-ca-bundle.pem
    mode: '0644'


- name: Copier le docker-compose.yml de Wiki.js
  become: true
  copy:
    src: docker-compose.yml        # ton fichier compose (dans roles/wiki/files/)
    dest: /opt/wiki/docker-compose.yml
    mode: '0644'
  notify: Restart Wiki.js

  # -------------------------------------------------------------------
# Étape 1 : Lire le fichier clients.json sur la VM
# -------------------------------------------------------------------
- name: Lire clients.json sur la VM
  slurp:
    src: /opt/keycloak/clients.json  # chemin du fichier côté machine distante (VM)
  register: kc_clients_raw    # on stocke le contenu brut (encodé en base64) dans cette variable

# -------------------------------------------------------------------
# Étape 2 : Transformer le contenu en variable JSON utilisable
# -------------------------------------------------------------------
- name: Convertir clients.json en dictionnaire
  set_fact:
    # kc_clients_raw.content = contenu du fichier en base64
    # b64decode = décoder le base64
    # from_json = parser le texte JSON en dictionnaire Python/Ansible
    kc_clients: "{{ kc_clients_raw.content | b64decode | from_json }}"
    # Résultat final : kc_clients = dictionnaire utilisable dans les templates
    # Exemple :
    # kc_clients['ia']     -> secret du client wiki-ia
    # kc_clients['devops'] -> secret du client wiki-devops
    # kc_clients['cyber']  -> secret du client wiki-cyber

- name: Générer les fichiers .env pour chaque instance Wiki.js
  become: true
  template:
    src: env.j2                    # ton template (dans roles/wiki/templates/)
    dest: "/opt/wiki/envs/wiki-{{ item.name }}.env"
    mode: '0644'
  loop: "{{ wikis }}"              # défini dans group_vars/all.yml
  notify: Restart Wiki.js

- name: Déployer Wiki.js avec Docker Compose v2
  become: true
  community.docker.docker_compose_v2:
    project_src: /opt/wiki
    state: present
  notify: Restart Wiki.js

- name: Déployer Wiki.js avec Docker Compose v2
  become: true
  community.docker.docker_compose_v2:
    project_src: /opt/wiki
    state: present
  notify: Restart Wiki.js

- name: Attendre que PostgreSQL accepte les connexions
  community.postgresql.postgresql_ping:
    db: "wiki_{{ item.name }}"
    login_user: wikijs
    login_password: wikijs_pass
    login_host: "name_db_{{ item.name }}"
    register: db_ping
  retries: 10
  delay: 5
  until: db_ping is succeeded
  loop: "{{ wikis }}"
  loop_control:
    label: "{{ item.name }}"

- name: Configurer provider Keycloak dans la DB Wiki.js
  community.postgresql.postgresql_query:
    db: "wiki_{{ item.name }}"
    login_user: wikijs
    login_password: wikijs_pass
    
    query: |
      UPDATE authentication
      SET "isEnabled" = true,
          "order" = 0,
          "displayName" = 'Keycloak',
          config = jsonb_build_object(
              'host', 'https://sso.{{ base_domain }}',
              'realm', 'saas',
              'clientId', '{{ item.name }}',
              'clientSecret', '{{ kc_clients[item.name] }}',
              'authorizationURL', 'https://sso.{{ base_domain }}/realms/saas/protocol/openid-connect/auth',
              'tokenURL', 'https://sso.{{ base_domain }}/realms/saas/protocol/openid-connect/token',
              'userInfoURL', 'https://sso.{{ base_domain }}/realms/saas/protocol/openid-connect/userinfo',
              'logoutURL', 'https://sso.{{ base_domain }}/realms/saas/protocol/openid-connect/logout',
              'logoutUpstream', false,
              'logoutUpstreamRedirectLegacy', false
          )
      WHERE "strategyKey" = 'keycloak';
  loop: "{{ wikis }}"
  loop_control:
    label: "{{ item.name }}"
  
